import json
import os
import boto3
from botocore.exceptions import ClientError
from sys import stdout

# This lambda is to be used in SIT and WL to test the ingest subscription notification process.
# This is a test lambda that gets triggered off of the interal CMR load balancer.
# It receives a notification generated by the ingest notification lambda. 
# The notification is stored in a file in an S3 bucket. Users can tunnel into the CMR internal only 
# load balancer and run curl http://localhost:8081/notification/tester.  Make sure to use the correct port number
# that you used in your tunnel.

s3 = boto3.client('s3')
BUCKET_NAME = os.getenv("BUCKET_NAME")
FILE_NAME = 'notification-message.json'


# handler(event: Dict[str, Any], context: Any) -> None:
def handler(event, context):
    """This handler is invoked from the CMR internal load balancer from an http request.
       If method is get, then read the contents of the file in the bucket and return the file contents.
       The caller can then verify that the notfication that was sent by the ingest notification lambda is correct.
       If method is post, then save the contents of the event body in the file located in the bucket.
       The contents can be recalled by the get method to verify the sent notification."""

    method = event['httpMethod']

    if method == 'GET':
        return handle_get()
    elif method == 'POST':
        body = event['body']
        return handle_post(body)
    else:
        return {
            'statusCode': 405,
            'body': json.dumps('Method Not Allowed')
        }

def handle_post(body):
    """This method save the contents of the request body into a file."""
    try:
        # Parse the incoming JSON data
        body = json.loads(body)
        
        # Save the data to S3
        s3.put_object(
            Bucket=BUCKET_NAME,
            Key=FILE_NAME,
            Body=json.dumps(body),
            ContentType='application/json'
        )
        
        return {
            'statusCode': 200,
            'body': json.dumps('Data saved successfully')
        }
    except Exception as e:
        print(f"Error in POST: {str(e)}")
        stdout.flush()
        return {
            'statusCode': 500,
            'body': json.dumps('Error saving data')
        }

def handle_get():
    """This method retreives the contents of the file."""
    try:
        # Retrieve the data from S3
        response = s3.get_object(Bucket=BUCKET_NAME, Key=FILE_NAME)
        file_content = response['Body'].read().decode('utf-8')
        
        return {
            'statusCode': 200,
            'body': file_content
        }
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchKey':
            return {
                'statusCode': 404,
                'body': json.dumps('File not found')
            }
        else:
            print(f"Error in GET: {str(e)}")
            stdout.flush()
            return {
                'statusCode': 500,
                'body': json.dumps('Error retrieving data')
            }

